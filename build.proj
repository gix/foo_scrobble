<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="Current" DefaultTargets="Package">
  <PropertyGroup>
    <Configuration Condition="'$(Configuration)' == ''">Release</Configuration>
    <PackageDir>$(MSBuildThisFileDirectory)build\publish\</PackageDir>
    <BuildProperties>Configuration=$(Configuration);Platform=x86;OfficialBuild=true;ContinuousIntegrationBuild=true;FinalVersionKind=release</BuildProperties>
  </PropertyGroup>
  <ItemGroup>
    <Project Include="src\foo_scrobble.sln"/>
  </ItemGroup>

  <Import Project="eng\common\GetVersionInfo.targets"/>

  <UsingTask TaskName="Zip" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
    <ParameterGroup>
      <OutputFilename ParameterType="System.String" Required="true" />
      <Files ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
    </ParameterGroup>
    <Task>
      <Reference Include="System.IO.Compression" />
      <Using Namespace="System.IO.Compression" />
      <Code Type="Fragment" Language="cs">
      <![CDATA[
        try {
          string outputFile = Path.GetFullPath(OutputFilename);
          Directory.CreateDirectory(Path.GetDirectoryName(outputFile));
          using (var zipStream = new FileStream(outputFile, FileMode.Create, FileAccess.Write))
          using (var archive = new ZipArchive(zipStream, ZipArchiveMode.Create)) {
              foreach (ITaskItem fileItem in Files) {
                  string filename = fileItem.ItemSpec;
                  using (var fileStream = new FileStream(filename, FileMode.Open, FileAccess.Read))
                  using (var entryStream = archive.CreateEntry(new FileInfo(filename).Name).Open())
                      fileStream.CopyTo(entryStream);
              }
          }
          return true;
        } catch (Exception ex) {
          Log.LogErrorFromException(ex);
          return false;
        }
      ]]>
      </Code>
    </Task>
  </UsingTask>

  <Target Name="Clean" Condition="'$(Clean)'!='false'">
    <MSBuild Projects="@(Project)"
             Properties="$(BuildProperties)"
             BuildInParallel="true"
             StopOnFirstFailure="true"
             Targets="Clean"/>
    <RemoveDir Directories="build\x86"/>
  </Target>

  <Target Name="Restore" Condition="'$(Restore)'!='false'">
    <PropertyGroup>
      <NuGetExecutable Condition="'$(NuGetExecutable)'==''">build\nuget.exe</NuGetExecutable>
      <NuGetPackagesDirectory>$(MSBuildThisFileDirectory)src\packages\</NuGetPackagesDirectory>
    </PropertyGroup>
    <ItemGroup>
      <NuGetRestoreTarget Include="@(Project)"/>
    </ItemGroup>
    <Exec Condition="'@(NuGetRestoreTarget)'!=''"
          Command="&quot;$(NuGetExecutable)&quot; restore -NonInteractive -PackagesDirectory &quot;$(NuGetPackagesDirectory)\&quot; &quot;%(NuGetRestoreTarget.Identity)&quot;"/>
  </Target>

  <Target Name="Build" DependsOnTargets="Restore" Condition="'$(Build)'!='false'">
    <MSBuild Projects="@(Project)"
             Properties="$(BuildProperties);Dummy=1"
             BuildInParallel="true"
             StopOnFirstFailure="true"
             Targets="Build"/>
  </Target>

  <Target Name="Package" DependsOnTargets="Clean;Build">
    <GetVersionInfo ModulePath="build\x86\bin\foo_scrobble\foo_scrobble.dll">
      <Output TaskParameter="FileVersion" PropertyName="FileVersion"/>
    </GetVersionInfo>
    <Zip Files="build\x86\bin\foo_scrobble\foo_scrobble.dll"
         OutputFilename="$(PackageDir)foo_scrobble.fb2k-component"/>
    <Zip Files="build\x86\bin\foo_scrobble\foo_scrobble.dll;build\x86\bin\foo_scrobble\foo_scrobble.pdb"
         OutputFilename="$(PackageDir)foo_scrobble-$(FileVersion).zip"/>
  </Target>
</Project>
