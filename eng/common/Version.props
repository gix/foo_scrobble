<?xml version="1.0" encoding="utf-8"?>
<Project>
  <PropertyGroup Condition="'$(OfficialBuild)' == 'true' or '$(ForceVersionDateStamp)'=='true'">
    <_BuildNumber>$(OfficialBuildId)</_BuildNumber>
    <_BuildNumber Condition="'$(OfficialBuildId)' == ''">$([System.DateTime]::Now.ToString('yyyyMMdd.HHmm'))</_BuildNumber>

    <!--
      Official build PackageVersion format: MAJOR.MINOR.PATCH-PRERELEASE.SHORTDATE.REVISION+SHORTSHA

      MAJOR.MINOR.PATCH is specified by the project in VersionPrefix property.
      PRERELEASE.SHORTDATE.REVISION is calculated here and stored in VersionSuffix property.
      SHORTSHA is appended when PackageVersion is calculated in a target.

      OfficialBuildId is assumed to have format "yyyyMMdd.r" (the assumption is checked later in a target).
      REVISION (VersionSuffixBuildOfTheDay) is set to r component of OfficialBuildId.
      SHORTDATE (VersionSuffixDateStamp) is set to yy * 1000 + mm * 50 + dd.
    -->
    <_BuildNumberYY>$(_BuildNumber.Substring($([System.Convert]::ToInt32(2)), $([System.Convert]::ToInt32(2))))</_BuildNumberYY>
    <_BuildNumberMM>$(_BuildNumber.Substring($([System.Convert]::ToInt32(4)), $([System.Convert]::ToInt32(2))))</_BuildNumberMM>
    <_BuildNumberDD>$(_BuildNumber.Substring($([System.Convert]::ToInt32(6)), $([System.Convert]::ToInt32(2))))</_BuildNumberDD>
    <_BuildNumberR>$(_BuildNumber.Substring($([System.Convert]::ToInt32(9))))</_BuildNumberR>

    <!-- yy * 1000 + mm * 50 + dd -->
    <VersionSuffixDateStamp>$([MSBuild]::Add($([MSBuild]::Add($([MSBuild]::Multiply($([System.Convert]::ToInt32($(_BuildNumberYY))), $([System.Convert]::ToInt32(1000)))), $([MSBuild]::Multiply($([System.Convert]::ToInt32($(_BuildNumberMM))), $([System.Convert]::ToInt32(50)))))), $([System.Convert]::ToInt32($(_BuildNumberDD)))))</VersionSuffixDateStamp>

    <VersionSuffixBuildOfTheDay>$([System.Convert]::ToInt32($(_BuildNumberR)))</VersionSuffixBuildOfTheDay>
    <VersionSuffixBuildOfTheDayPadded>$(VersionSuffixBuildOfTheDay.PadLeft($([System.Convert]::ToInt32(2)), $([System.Convert]::ToChar(`0`))))</VersionSuffixBuildOfTheDayPadded>

    <_BuildNumberLabels>.$(VersionSuffixDateStamp).$(VersionSuffixBuildOfTheDay)</_BuildNumberLabels>
  </PropertyGroup>

  <PropertyGroup Condition="'$(VersionSuffixDateStamp)' == ''">
    <!--
      Don't include a commit SHA to AssemblyInformationalVersion.
      It would reduce the possibility of sharing otherwise unchanged build artifacts across deterministic builds.
    -->
    <IncludeSourceRevisionInInformationalVersion>false</IncludeSourceRevisionInInformationalVersion>
  </PropertyGroup>

  <PropertyGroup>
    <_PreReleaseLabel>$(PreReleaseVersionLabel)</_PreReleaseLabel>
    <_PreReleaseLabel Condition="'$(PreReleaseVersionIteration)' != ''">$(PreReleaseVersionLabel).$(PreReleaseVersionIteration)</_PreReleaseLabel>
    <_PreReleaseLabel Condition="'$(ContinuousIntegrationBuild)' == 'true' and '$(OfficialBuild)' != 'true'">ci</_PreReleaseLabel>
    <_PreReleaseLabel Condition="'$(ContinuousIntegrationBuild)' != 'true'">dev</_PreReleaseLabel>

    <!--
      If FinalVersionKind is specified, overrides the package version produced by the build like so:
        ""           1.2.3-beta.12345.67+sha
        "prerelease" 1.2.3-beta+sha
        "release"    1.2.3
    -->
    <VersionSuffix Condition="'$(FinalVersionKind)' == 'release'"/>
    <VersionSuffix Condition="'$(FinalVersionKind)' == 'prerelease'">$(_PreReleaseLabel).final</VersionSuffix>
    <VersionSuffix Condition="'$(FinalVersionKind)' == ''">$(_PreReleaseLabel)$(_BuildNumberLabels)</VersionSuffix>
  </PropertyGroup>
</Project>
